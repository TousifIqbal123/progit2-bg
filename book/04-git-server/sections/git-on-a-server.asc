[[_getting_git_on_a_server]]
=== Достъп до Git на сървъра

Сега ще разгледаме настройката на Git услуга, ползваща тези протоколи на ваш собствен сървър.

[NOTE]
====
Тук ще демонстрираме командите и стъпките за базови опростени инсталации на Linux базиран сървър, но разбира се, възможно е това да стане на macOS и Windows машини.
В действителност, изграждането на production сървър в рамките на вашата инфраструктура ще изисква различни стъпки по отношение на мерките за сигурност или според конкретните инструменти на операционната ви система, но да се надяваме, че тези стъпки ще ви дадат първоначална насока за това какво се изисква.
====

Като първа стъпка, за да получите Git на сървъра, ще трябва да експортирате налично хранилище в ново, bare хранилище - това е хранилище, което не съдържа работна директория.
Това обикновено е съвсем лесно.
Използвайте командата за клониране с параметър `--bare`.(((git commands, clone, bare)))
По конвенция, директориите за bare хранилището завършват на `.git`, например така:

[source,console]
----
$ git clone --bare my_project my_project.git
Cloning into bare repository 'my_project.git'...
done.
----

Сега трябва да имате копие от Git директорията във вашата директория `my_project.git`.

Това е приблизително еквивалентно на резултата от командата:

[source,console]
----
$ cp -Rf my_project/.git my_project.git
----

Съществуват някои незначителни разлики в конфигурационния файл, но за нашите цели резултатът е почти един и същ.
Командата взема Git хранилището, без работната му директория и създава директория специално за него.

[[_bare_repo]]
==== Изпращане на Bare хранилище към сървъра

След като вече имате копие на хранилището, всичко което трябва да сторите е да го копирате на сървъра и да настроите съответния протокол/протоколи за достъп.
Нека кажем, че имате сървър наречен `git.example.com`, към който имате SSH достъп и искате да пазите всичките си Git хранилища в директорията `/srv/git`.
Като приемаме, че `/srv/git` съществува на сървъра, можете да създадете ново хранилище копирайки наличното такова:

[source,console]
----
$ scp -r my_project.git user@git.example.com:/srv/git
----

В този момент, другите потребители с SSH достъп до същия сървър и права за четене към `/srv/git` директорията му, вече могат да клонират вашето хранилище изпълнявайки:

[source,console]
----
$ git clone user@git.example.com:/srv/git/my_project.git
----

Ако някой от тях има и права за писане до директорията `/srv/git/my_project.git`, то той ще има автоматично и push права до хранилището.

Git автоматично ще добави group write права до хранилището по коректен начин, ако изпълните `git init` с параметъра `--shared`.
Изпълнението на тази команда не унищожава никакви къмити, референции или други обекти(((git commands, init, bare)))

[source,console]
----
$ ssh user@git.example.com
$ cd /srv/git/my_project.git
$ git init --bare --shared
----

Виждате колко лесно е да вземете Git хранилище, да създадете bare версия и да го поставите в сървър, към който колегите ви имат SSH достъп.
Сега сте готови да работите съвместно по проекта.

Важно е да посочим, че това буквално е всичко, от което имате нужда за да пуснете използваем Git сървър - просто добавете акаунти с SSH достъп за колегите ви и копирайте едно bare хранилище там, където те имат права за четене и писане.
Сега сте готови, не трябва нищо повече.

В следващите секции ще видим как да направим по-модерни конфигурации.
Ще направим обзор на това как да настроите нещата така, че да не се нуждаете от отделни акаунти за всеки потребител, как да добавим публичен достъп за четене до хранилища, настройване на уеб потребителски интерфейси и др.
Обаче, просто помнете, че това са допълнения - всичко, което ви _трябва_ за да работите съвместно по частен проект е SSH сървър и bare хранилище.

==== Малки конфигурации

Ако сте малък екип или просто тествате Git във вашата организация и имате само няколко разработчика, нещата могат да са простички за вас.
Един от най-сложните аспекти в настройката на Git сървъра е управлението на потребителите.
Ако искате някои хранилища да са само за четене за определени потребители, а други да са достъпни за писане, то настройките на достъпа и съответните права могат да са по-трудни за наместване.

===== SSH достъп

(((serving repositories, SSH)))
Ако имате сървър, към който всичките ви колеги имат SSH достъп, най-лесно е да разположите хранилищата си в него, защото както видяхме в предната секция - няма да имате почти никаква работа по настройките.
Ако искате по-комплексен контрол на достъпа, можете да се справите с нормалните средства за достъп до файловата система, които операционната система предлага.

Ако искате да разположите хранилищата си на сървър, който няма акаунти за всички в екипа ви, за които допускате, че ще е нужен достъп с права за писане, тогава трябва да настроите SSH достъп за тях.
Допускаме, че ако имате сървър с който да правите това, вече имате инсталиран SSH за достъп до него.

Има няколко начина да дадете достъп на всеки от екипа.
Първо, можете да създадете акаунти за всички колеги, което е лесно, но може да е досадно.
Може да не искате да изпълнявате `adduser`/`useradd` и да правите временни пароли за всеки колега.

Втори начин е да създадете единичен 'git' потребител на машината, да помолите всеки ваш колега, който трябва да има права за писане да ви изпрати свой SSH публичен ключ, и да добавите ключовете във файла `~/.ssh/authorized_keys` на потребителя 'git'.
Така всеки от колегите ви ще има достъп до машината през потребителското име 'git'.
Това не засяга по никакъв начин commit данните -- SSH потребителят, с който се свързвате към машината не се отразява на записаните къмити.

Друг начин е да настроите вашия SSH сървър да автентикира потребителите през LDAP сървър или някакъв друг централизиран източник за автентикация, който може да имате.
Докато всеки от потребителите може да получи шел-достъп на машината, всеки SSH оторизационен механизъм за който се сещате, би трябвало да работи.
