[[_git_svn]]
==== Git и Subversion

(((Subversion)))(((Interoperation with other VCSs, Subversion)))
Голяма част от проектите с отворен код, а също така и голям брой корпоративни проекти използват Subversion за управление на сорс кода.
Subversion съществува повече от десетилетие и през повечето време от своя живот беше _де факто_ първи избор за контрол на open source проекти.
Тя много прилича на CVS, която пък преди това беше най-популярната система за контрол.

(((git commands, svn)))(((git-svn)))
Една от най-съществените възможности на Git е двупосочния bridge към Subversion известен като `git svn`.
Този инструмент позволява да използвате Git като валиден клиент на Subversion сървър, така че можете да ползвате всички локални възможности на Git и след това да публикувате работатата си на Subversion сървъра така сякаш ползвате Subversion и локално.
Това означава, че можете да имате локални клонове и сливания, да използвате индексната област, да правите rebasing/cherry-picking и т.н. докато колегите ви продължават да си работят по стария начин.
Това е добър начин за вмъкване на Git в корпоративни среди както и за привличане на повече разработчици (а защо не и на цели корпоративни звена) да преминат на Git.
Subversion бриджът е ключ към DVCS света.

===== `git svn`

Основната команда в Git за всички Subversion функционалности е `git svn`.
Тя приема множество подкоманди и ще покажем най-използваните от тях симулирайки няколко прости работни процеса.

Важно е да помним, че използвайки `git svn` ние комуникираме със Subversion, система функционираща по много различен начин от Git.
Въпреки че *можете* да правите локални клонове и сливания, в общи линии е най-добре да поддържате историята си възможно най-праволинейна използвайки пребазирания и избягвайки да правите неща като едновременна комуникация с отдалечени Git хранилища.

Не опитвайте да пренаписвате историята и да правите повторно публикуване и не публикувайте в паралелно Git хранилище за да сътрудничите с други Git колеги по едно и също време.
Subversion може да има само една, линейна история и е много лесно да бъде объркана.
Ако работите с екип и някои от вас използват SVN, а други Git -- уверете се, че всички разработчици използват SVN сървъра за споделяне на работа, това ще ви улесни живота значително.

===== Настройка

За целите на демонстрацията, се нуждаем от стандартно SVN хранилище с права за писане в него.
Ако искате да копирате следващите примери, ще трябва да направите writeable копие на тестово Subversion хранилище.
Най-лесно ще направите това с инструмента `svnsync`, който се разпространява със Subversion.

Първо, създаваме ново локално Subversion хранилище:

[source,console]
----
$ mkdir /tmp/test-svn
$ svnadmin create /tmp/test-svn
----

След това, позволете всички да могат да променят revprops -- лесният начин за това е да добавите скрипт `pre-revprop-change`, който винаги излиза с exit 0:

[source,console]
----
$ cat /tmp/test-svn/hooks/pre-revprop-change
#!/bin/sh
exit 0;
$ chmod +x /tmp/test-svn/hooks/pre-revprop-change
----

Сега можете да синхронизирате този проект в локалната машина изпълнявайки `svnsync init` с целево и изходно хранилища.

[source,console]
----
$ svnsync init file:///tmp/test-svn \
  http://your-svn-server.example.org/svn/
----

Това настройва параметрите за стартиране на синхронизацията.
След това може да клонирате кода с:

[source,console]
----
$ svnsync sync file:///tmp/test-svn
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .............................[...]
Committed revision 2.
Copied properties for revision 2.
[…]
----

Въпреки, че тази операция може да отнеме само няколко минути, ако се опитате да копирате оригиналното хранилище към друго отдалечено такова (вместо към локално), процесът ще продължи близо час при все че има по-малко от 100 къмита.
Subversion ще трябва да клонира една версия в един момент и след това да я публикува обратно в друго хранилище -- това е тотално неефективно, но е единственият наличен начин.

===== Начало на работа

След като вече имате Subversion хранилище, до което имате права за писане, можете да изпълните един типичен работен процес.
Ще започнем с командата `git svn clone`, която импортира цяло Subversion хранилище в локално Git такова.
Да не забравяме, че импортираме от реално хостнато Subversion хранилище, така че трябва да заменим израза `\file:///tmp/test-svn` с URL-а на вашето Subversion хранилище:

[source,console]
----
$ git svn clone file:///tmp/test-svn -T trunk -b branches -t tags
Initialized empty Git repository in /private/tmp/progit/test-svn/.git/
r1 = dcbfb5891860124cc2e8cc616cded42624897125 (refs/remotes/origin/trunk)
    A	m4/acx_pthread.m4
    A	m4/stl_hash.m4
    A	java/src/test/java/com/google/protobuf/UnknownFieldSetTest.java
    A	java/src/test/java/com/google/protobuf/WireFormatTest.java
…
r75 = 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae (refs/remotes/origin/trunk)
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/my-calc-branch, 75
Found branch parent: (refs/remotes/origin/my-calc-branch) 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae
Following parent with do_switch
Successfully followed parent
r76 = 0fb585761df569eaecd8146c71e58d70147460a2 (refs/remotes/origin/my-calc-branch)
Checked out HEAD:
  file:///tmp/test-svn/trunk r75
----

Това всъщност изпълнява еквивалента на две команди, `git svn init` последвана от `git svn fetch` към URL-а посочен от вас.
Процесът може да отнеме доста време.
Ако например тестовият проект имаше само около 75 къмита и сорс кодът не е много голям, Git независимо от всичко ще трябва да извлече всяка една версия индивидуално и да я къмитне индивидуално всеки път.
За проект със стотици или хиляди къмити, това буквално може да отнеме часове или дори дни.

Частта от командата `-T trunk -b branches -t tags` указва на Git, че това Subversion хранилище следва основните branching и tagging конвенции.
Ако вие именувате вашия trunk, клонове или тагове по различен начин, можете да промените тези опции.
Понеже това е толкова често ползвано, можете да замените целия израз просто с флага `-s`, което означава standart layout и прилага трите горни опции.
Така че тази команда е еквивалентна:

[source,console]
----
$ git svn clone file:///tmp/test-svn -s
----

В този момент вече трябва да разполагате с валидно Git хранилище с импортирани тагове и клонове:

[source,console]
----
$ git branch -a
* master
  remotes/origin/my-calc-branch
  remotes/origin/tags/2.0.2
  remotes/origin/tags/release-2.0.1
  remotes/origin/tags/release-2.0.2
  remotes/origin/tags/release-2.0.2rc1
  remotes/origin/trunk
----

Отбележете как инструментът управлява Subversion таговете като отдалечени референции.
(((git commands, show-ref)))
Нека погледнем в повече дълбочина с plumbing командата на Git `show-ref`:

[source,console]
----
$ git show-ref
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/heads/master
0fb585761df569eaecd8146c71e58d70147460a2 refs/remotes/origin/my-calc-branch
bfd2d79303166789fc73af4046651a4b35c12f0b refs/remotes/origin/tags/2.0.2
285c2b2e36e467dd4d91c8e3c0c0e1750b3fe8ca refs/remotes/origin/tags/release-2.0.1
cbda99cb45d9abcb9793db1d4f70ae562a969f1e refs/remotes/origin/tags/release-2.0.2
a9f074aa89e826d6f9d30808ce5ae3ffe711feda refs/remotes/origin/tags/release-2.0.2rc1
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/remotes/origin/trunk
----

Git не прави това при клониране от Git сървър, ето как изглежда прясно клонирано хранилище с тагове:

[source,console]
----
$ git show-ref
c3dcbe8488c6240392e8a5d7553bbffcb0f94ef0 refs/remotes/origin/master
32ef1d1c7cc8c603ab78416262cc421b80a8c2df refs/remotes/origin/branch-1
75f703a3580a9b81ead89fe1138e6da858c5ba18 refs/remotes/origin/branch-2
23f8588dde934e8f33c263c6d8359b2ae095f863 refs/tags/v0.1.0
7064938bd5e7ef47bfd79a685a62c1e2649e2ce7 refs/tags/v0.2.0
6dcb09b5b57875f334f61aebed695e2e4193db5e refs/tags/v1.0.0
----

Git издърпва таговете директно в `refs/tags`, вместо да ги третира като отдалечени клонове.

===== Къмитване обратно в Subversion

След като имаме работна директория, можем да извършим някакви промени по нея и да публикуваме къмитите си обратно използвайки Git практически като SVN клиент.
Ако променим един от файловете и къмитнем промяната, ще имаме къмит съществуващ локално, но не и на Subversion сървъра:

[source,console]
----
$ git commit -am 'Adding git-svn instructions to the README'
[master 4af61fd] Adding git-svn instructions to the README
 1 file changed, 5 insertions(+)
----

Следващата стъпка е да публикуваме тази промяна.
Забележете как това променя начина ви на работа със Subversion -- можете да направите повече от един локален къмит офлайн и след това да изпратите всички наведнъж към Subversion сървъра.
За да направите това, използвайте командата `git svn dcommit`:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r77
    M	README.txt
r77 = 95e0222ba6399739834380eb10afcd73e0670bc5 (refs/remotes/origin/trunk)
No changes between 4af61fd05045e07598c553167e0f31c84fd6ffe1 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Командата взема всички ваши новоизвършени къмити, създава Subversion къмит за всеки от тях и след това редактира локалния ви Git къмит за да включи уникален идентификатор.
Това е важно, защото означава, че всичките ви SHA-1 чексуми на вашите къмити се променят.
Отчасти поради тази причина, да работите с Git базирани отдалечени версии на проектите едновременно със Subversion такива не е добра идея.
Ако погледнете последния къмит, може да видите новодобавения идентификатор `git-svn-id`:

[source,console]
----
$ git log -1
commit 95e0222ba6399739834380eb10afcd73e0670bc5
Author: ben <ben@0b684db3-b064-4277-89d1-21af03df0a68>
Date:   Thu Jul 24 03:08:36 2014 +0000

    Adding git-svn instructions to the README

    git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68
----

Забелязваме също така, че SHA-1 чексумата, която първоначално започваше с `4af61fd`, когато къмитнахме сега започва с `95e0222`.
Ето защо, ако все пак настоявате да публикувате и към двата вида сървъри, трябва първо да направите това (`dcommit`) към Subversion сървъра, понеже това променя чексумата.

===== Издърпване на нови промени

При съвместната работа в един момент неизбежно се стига до опит за публикуване на промени предизвикващи конфликт.
Промяната с конфликт ще бъде отхвърлена докато не слеете работата на другия колега преди това.
В `git svn`, това изглежда така:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: d5837c4b461b7c0e018b49d12398769d2bfc240a and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 f414c433af0fd6734428cf9d2a9fd8ba00ada145 c80b6127dd04f5fcda218730ddf3a2da4eb39138 M	README.txt
Current branch master is up to date.
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

За да се измъкнем от подобна ситуация, използваме `git svn rebase`, която издърпва от сървъра всички промени, които все още нямаме локално и след това пребазира текущата ни работа върху тях:

[source,console]
----
$ git svn rebase
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: eaa029d99f87c5c822c5c29039d19111ff32ef46 and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 65536c6e30d263495c17d781962cfff12422693a b34372b25ccf4945fe5658fa381b075045e7702a M	README.txt
First, rewinding head to replay your work on top of it...
Applying: update foo
Using index info to reconstruct a base tree...
M	README.txt
Falling back to patching base and 3-way merge...
Auto-merging README.txt
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

Сега всичката ви работа е пребазирана върху последната изтеглена от Subversion сървъра, така че можете успешно да направите `dcommit`:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r85
    M	README.txt
r85 = 9c29704cc0bbbed7bd58160cfb66cb9191835cd8 (refs/remotes/origin/trunk)
No changes between 5762f56732a958d6cfda681b661d2a239cc53ef5 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Отбележете, че за разлика от Git, при който трябва да слеете upstream промените, които ви липсват локално преди да можете да публикувате, `git svn` ви кара да правите това само ако промените предизвикват конфликт (точно както работи Subversion).
Казано с други думи, ако някой друг публикува промени по един файл и след това вие публикувате промени по друг файл, `dcommit` ще си работи без проблем:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	configure.ac
Committed r87
    M	autogen.sh
r86 = d8450bab8a77228a644b7dc0e95977ffc61adff7 (refs/remotes/origin/trunk)
    M	configure.ac
r87 = f3653ea40cb4e26b6281cec102e35dcba1fe17c4 (refs/remotes/origin/trunk)
W: a0253d06732169107aa020390d9fefd2b1d92806 and refs/remotes/origin/trunk differ, using rebase:
:100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 e757b59a9439312d80d5d43bb65d4a7d0389ed6d M	autogen.sh
First, rewinding head to replay your work on top of it...
----

Това е важен за запомняне момент, защото резултатът ще е статус на проекта, който не съществува и на двата локални компютъра.
Ако промените са несъвместими (но не правят конфликт) може да се окажете с проблеми, които са трудни за установяване.
При един Git сървър това не е така -- можете изцяло да тествате статуса на проекта на локалната ви машина преди да го публикувате, докато при Subversion дори не можете да сте сигурни, че статусите преди и след къмитването ви са идентични.

Трябва да използвате тази команда за изтегляне на промени от Subversion сървъра дори все още да не сте готови да къмитвате вашите.
Можете да изпълните и `git svn fetch` за сваляне на новите данни, но `git svn rebase` изтегля и обновява локалните ви къмити с една команда.

[source,console]
----
$ git svn rebase
    M	autogen.sh
r88 = c9c5f83c64bd755368784b444bc7a0216cc1e17b (refs/remotes/origin/trunk)
First, rewinding head to replay your work on top of it...
Fast-forwarded master to refs/remotes/origin/trunk.
----

Изпълнявайте `git svn rebase` регулярно, за да сте сигурни, че локалния ви код е актуален.
Обаче трябва да сте сигурни, че работната ви директория е в чист вид, когато пуснете командата.
Ако имате некъмитнати промени, трябва или да ги маскирате (stash) или временно да ги къмитнете преди изпълнението на `git svn rebase`, иначе командата ще спре ако види, че пребазирането ще доведе до merge конфликт.

===== Проблеми с Git клонове

Когато започнете да се чувствате удобно с похватите на работа на Git, доста вероятно е да започнете да правите topic клонове, да работите в тях и да ги сливате.
Ако публикувате към Subversion сървър с `git svn`, може да искате да пребазирате работата си върху единичен клон всеки път вместо да сливате клонове.
Причината да предпочетете пребазирането е, че Subversion поддържа линейна история и не обработва сливанията така, както го прави Git. Така че `git svn` следва само първия родител при конвертирането на snapshot-ите в Subversion къмити.

Да допуснем, че историята ни изглежда така: създали сме `experiment` клон, направили сме два къмита и след това сме го слели обратно в `master`.
При изпълнение на `dcommit`, ще видим нещо такова:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	CHANGES.txt
Committed r89
    M	CHANGES.txt
r89 = 89d492c884ea7c834353563d5d913c6adf933981 (refs/remotes/origin/trunk)
    M	COPYING.txt
    M	INSTALL.txt
Committed r90
    M	INSTALL.txt
    M	COPYING.txt
r90 = cb522197870e61467473391799148f6721bcf9a0 (refs/remotes/origin/trunk)
No changes between 71af502c214ba13123992338569f4669877f55fd and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Изпълнението на `dcommit` от клон със слята история работи добре с изключение на факта, че когато погледнете в историята на Git проекта, ще установите че двата къмита от клона `experiment` не са пренаписани, вместо това всички тези промени се появяват в SVN версията на единичния сливащ къмит.

Когато някой друг клонира тази работа, всичко което ще види е merge къмита ви с всичката работа обединена в него все едно сте изпълнили `git merge --squash`, но никакви подробности откъде и кога са промените направени от вас в `experiment`.

===== Subversion клонове

Клоновете в Subversion не са същите като в Git и ако можете да ги избягвате ще е най-добре.
Но при все това, с `git svn` можете да създавате и да къмитвате в Subversion клонове.

===== Създаване на нов SVN клон

За да създадете нов клон в Subversion, използвайте `git svn branch [new-branch]`:

[source,console]
----
$ git svn branch opera
Copying file:///tmp/test-svn/trunk at r90 to file:///tmp/test-svn/branches/opera...
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/opera, 90
Found branch parent: (refs/remotes/origin/opera) cb522197870e61467473391799148f6721bcf9a0
Following parent with do_switch
Successfully followed parent
r91 = f1b64a3855d3c8dd84ee0ef10fa89d27f1584302 (refs/remotes/origin/opera)
----

Това прави еквивалента на `svn copy trunk branches/opera` командата в Subversion и работи на Subversion сървъра.
Важно е да посочим, че това не ви прехвърля автоматично в този клон и ако сега къмитнете, къмитът ще отиде в клона `trunk` на сървъра, вместо в `opera`.

===== Превключване на активни клонове

Git определя в кой клон отиват вашите dcommits гледайки върховете на всички ваши Subversion клонове в историята ви -- трябва да имате само един и той трябва да е последния с `git-svn-id` в текущата ви branch история.

Ако искате да работите по повече от един клон едновременно, можете да настроите локалните клонове да правят `dcommit` към специфични Subversion клонове стартирайки ги от импортирания Subversion къмит за този клон.
Ако искате клон `opera`, в който да работите отделно, може да изпълните:

[source,console]
----
$ git branch opera remotes/origin/opera
----

Сега, ако желаете да слеете вашия `opera` клон в `trunk` (вашия `master` клон), можете да го направите с нормална команда `git merge`.
Но трябва да предоставите описателно къмит съобщение (чрез `-m`) или сливането ще гласи "`Merge branch opera`" вместо нещо полезно.

Помнете, че независимо че използвате `git merge` за тази операция и че сливането вероятно ще е много по-лесно отколкото би било в Subversion (защото Git автоматично ще установи подходящата merge база за вас), това не е стандартен Git merge къмит. 
Ще трябва да изпратите тези данни към Subversion сървър, който не може да обработва къмит следящ повече от един родител и когато го направите, те ще изглеждат като единичен къмит обединяващ цялата извършена работа от друг клон.
След като слеете един клон в друг, не можете лесно да се върнете и да продължите да работите по този клон, както нормално бихте могли в Git.
Командата `dcommit` изтрива всяка информация казваща кой клон е бил слят, така че евентуалните следващи merge-base изчисления ще са погрешни -- `dcommit` прави така, че резултатът от `git merge` да изглежда като от `git merge --squash`.
За жалост няма добър начин за избягване на такава ситуация -- Subversion не може да пази тази информация и винаги ще бъдете ограничавани, когато го използвате като сървър.
За да си спестите проблеми, добре е да изтривате локалния клон (в този случай `opera`) след като го слеете в trunk.

===== Subversion команди

Инструментите на `git svn` осигуряват множество команди, които подпомагат по-лесното минаване към Git, предоставяйки функционалности подобни на тези в Subversion.
Ето няколко команди, които ви дават това, което и Subversion.

====== История в SVN стил

Ако сте свикнали със Subversion и искате да видите историята си в SVN стил, може да използвате `git svn log`:

[source,console]
----
$ git svn log
------------------------------------------------------------------------
r87 | schacon | 2014-05-02 16:07:37 -0700 (Sat, 02 May 2014) | 2 lines

autogen change

------------------------------------------------------------------------
r86 | schacon | 2014-05-02 16:00:21 -0700 (Sat, 02 May 2014) | 2 lines

Merge branch 'experiment'

------------------------------------------------------------------------
r85 | schacon | 2014-05-02 16:00:09 -0700 (Sat, 02 May 2014) | 2 lines

updated the changelog
----

Две неща са важни с `git svn log`.
Първо, тя работи офлайн, за разлика от реалната `svn log` команда, която пита Subversion сървъра за данни.
Второ, тя показва само къмитите, които са били публикувани на Subversion сървъра.
Локалните Git къмити, които не сте публикували, не се показват -- нито пък тези, които други разработчици евентуално са публикували на Subversion сървъра междувременно.
Получавате нещо като last known статус на къмитите от сървъра.

====== SVN анотация

Точно както `git svn log` симулира командата `svn log` офлайн, можете да изпълните еквивалента на `svn annotate` с `git svn blame [FILE]`.
Изходът изглежда така:

[source,console]
----
$ git svn blame README.txt
 2   temporal Protocol Buffers - Google's data interchange format
 2   temporal Copyright 2008 Google Inc.
 2   temporal http://code.google.com/apis/protocolbuffers/
 2   temporal
22   temporal C++ Installation - Unix
22   temporal =======================
 2   temporal
79    schacon Committing in git-svn.
78    schacon
 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol
 2   temporal Buffer compiler (protoc) execute the following:
 2   temporal
----

Отново, вашите къмити и междувременно публикуваните от други хора промени в Subversion сървъра няма да се покажат.

====== Инфомация за SVN Server

Можете също да получите информацията, която `svn info` предоставя с `git svn info`:

[source,console]
----
$ git svn info
Path: .
URL: https://schacon-test.googlecode.com/svn/trunk
Repository Root: https://schacon-test.googlecode.com/svn
Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
Revision: 87
Node Kind: directory
Schedule: normal
Last Changed Author: schacon
Last Changed Rev: 87
Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009)
----

Данните подобно на `blame` и `log` са офлайн и са актуални към момента, когато последно сте комуникирали със Subversion сървъра.

====== Игнориране на това, което Subversion игнорира

Ако клонирате Subversion хранилище, което има зададени `svn:ignore` настройки, вероятно бихте искали да създадете съответни `.gitignore` файлове, така че да не къмитнете по невнимание ненужни неща.
`git svn` има две команди за случая.
Първата е `git svn create-ignore`, която автоматично създава съответстващите `.gitignore` файлове, така че следващият ви къмит може да ги включи.

Втората команда е `git svn show-ignore`, която печата на stdout редовете, които трябва да вмъкнете в `.gitignore` файл така че бихте могли да пренасочите изхода ѝ в exclude файла си и да не правите индивидуални `.gitignore`:

[source,console]
----
$ git svn show-ignore > .git/info/exclude
----

По този начин не се налага да пълните проекта с `.gitignore` файлове.
Това е добра опция, ако сте единствения Git потребител в Subversion екип и колегите ви не желаят да виждат `.gitignore` файлове в съвместния проект.

===== Git-Svn обобщение

Инструментите на `git svn` са полезни, ако си имате работа със Subversion сървър по една или друга причина.
Би следвало да гледате на Subversion като на орязан Git или ще си имате проблеми в превода, предизвикващи объркване у вас и у колегите ви.
За да си спестите главоболия, опитайте да спазвате тези правила:

* Поддържайте линейна Git история, която не съдържа сливащи къмити направени с `git merge`.
  Пребазирайте всяка работа, която сте извърили извън главния си клон обратно върху него, не я сливайте в него.
* Не работете паралелно по един и същи проект в Git сървър и Subversion сървър.
  По изключение може да имате един такъв за да ускорите клониранията за новите разработчици, но не публикувайте в него нищо, което не съдържа `git-svn-id` елемент.
  Може дори да искате да добавите `pre-receive` hook, който да проверява всяко къмит съобщение за наличие на `git-svn-id` поле и да отказва публикуванията с къмити, в които то липсва.

Спазвате ли тези съвети, работата ви със Subversion сървъри би могла да бъде по-поносима.
Обаче, ако е налична възможност да преминете към реален Git сървър, това ще даде на екипа ви много повече позитиви.
