==== Git и TFS

(((Interoperation with other VCSs, TFS)))
(((TFS)))((("TFVC", see="TFS")))
Git е популярна и сред Windows разработчиците и ако пишете код на Windows, е съвсем възможно да използвате и Microsoft Team Foundation Server (TFS).
TFS е обширна платформа, която включва функции като defect и work-item tracking, process support за Scrum, code review, version control.

За да няма смущения с понятията: *TFS* е сървърът, който поддържа контрол на версиите на сорс кода с Git и собствения си VCS наречен *TFVC* (Team Foundation Version Control).
Git поддържката е сравнително нова функционалност за TFS (появи се от версия 2013) така че всички инструменти преди нея се отнасят до version-control частта на ``TFS'', въпреки че повечето от тях работят с TFVC.

Ако се озовете в екип, който използва TFVC, но искате да използвате Git като клиент, съществува решение.

===== Кой инструмент да използваме

(((git-tf)))(((git-tfs)))
В действителност, решенията са две: git-tf и git-tfs.

Git-tfs (на адрес https://github.com/git-tfs/git-tfs[]) е .NET проект и по времето на писането на тази книга работи само под Windows.
За да работи с Git хранилища, той използва .NET bindings за libgit2, библиотечно-ориентирана имплементация на Git с висока производителност и гъвкавост.
Libgit2 при все това не е пълна Git имплементация, така че за да покрие различията git-tfs инструментът реално ще използва command-line клиента на Git за някои операции и на практика възможностите за работа с Git хранилища са неограничени. 
Поддръжката на TFVC функционалности е много зряла, понеже се използват асемблитата на Visual Studio за операции със сървъри.
Това значи, че ще ви трябва достъп до асемблитата, а от своя страна пък това изисква инсталиране на Visual Studio (всяка версия от 2010 нагоре, вкл. Express от 2012 нагоре) или Visual Studio SDK.

[CAUTION]
----
Git-tf е в статус End-of-Life (EOL) и няма да получава никакви ибновления занапред.
Също така - не се поддържа повече от Microsoft.
----

Git-tf (наличен от https://archive.codeplex.com/?p=gittf[]) от своя страна е Java проект и като такъв работи на всеки компютър с Java runtime environment.
Той комуникира с Git хранилища през JGit (JVM имплементация на Git), което значи, че няма ограничения по отношение на поддръжката на Git функции.
Обаче, поддръжката му на TFVC е ограничена в сравнение с git-tfs -- например не се поддържат клонове.

Всеки от двата инструмента има плюсове и минуси и според ситуацията единия от тях може да е по-добър избор от другия.
Ще прегледаме накратко как се използват и двата.

[NOTE]
====
За инструкциите, които следват се нуждаем от достъп до TFVC-базирано хранилище.
Такива няма много налични онлайн за разлика от Git или Subversion, така че може да се наложи да си създадете сами.
Codeplex (https://archive.codeplex.com/[]) или Visual Studio Online (https://visualstudio.microsoft.com[]) са добър избор за това.
====


===== Работа с `git-tf`

Първото нещо е да клонираме.
С `git-tf` това се прави така:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git
----

Първият аргумент е URL-а на TFVC колекция, вторият е под формата на `$/project/branch`, и третия е пътя до локалното Git хранилище, което да се създаде (този аргумент е незадължителен).
Git-tf може да работи само с един клон в даден момент, ако искате да работите и по друг TFVC клон ще трябва да направите ново клониране от него.

Това създава пълнофункционално Git хранилище:

[source,console]
----
$ cd project_git
$ git log --all --oneline --decorate
512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message
----

Нарича се _shallow_ (плитко, повърхностно) копие и съдържа само последния changeset.
TFVC не е проектирана така, че всеки клиент да има пълно копие на историята, така че git-tf взема само последната версия, което е много по-бързо.

Ако разполагате с време, може би си заслужава да изтеглите историята на целия проект с опцията `--deep`:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \
  project_git --deep
Username: domain\user
Password:
Connecting to TFS...
Cloning $/myproject into /tmp/project_git: 100%, done.
Cloned 4 changesets. Cloned last changeset 35190 as d44b17a
$ cd project_git
$ git log --all --oneline --decorate
d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye
126aa7b (tag: TFS_C35189)
8f77431 (tag: TFS_C35178) FIRST
0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
        Team Project Creation Wizard
----

Обърнете внимание на таговете с имена като `TFS_C35189`, това е функция подпомагаща да разберете кои Git къмити са асоциирани с дадени TFVC changeset-и.
Това е добър начин за извличане на подобна информация, с проста log команда можете да установите кои ваши къмити са асоциирани със snapshot, който съществува и на TFVC.
Те не са задължително необходими (и дори може да ги изключите с `git config git-tf.tag false`) -- git-tf пази реалните commit-changeset мапинги във файла `.git/git-tf`.


===== Работа с `git-tfs`

Git-tfs клонирането работи малко по-различно.
Наблюдавайте:

[source,powershell]
----
PS> git tfs clone --with-branches \
    https://username.visualstudio.com/DefaultCollection \
    $/project/Trunk project_git
Initialized empty Git repository in C:/Users/ben/project_git/.git/
C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9
C16 = c403405f4989d73a2c3c119e79021cb2104ce44a
Tfs branches found:
- $/tfvc-test/featureA
The name of the local branch will be : featureA
C17 = d202b53f67bde32171d5078968c644e562f1c439
C18 = 44cd729d8df868a8be20438fdeeefb961958b674
----

Отбележете флага `--with-branches`.
Git-tfs може да съотнася TFVC клонове на Git клонове и този флаг му указва да създаде локален Git клон за всеки TFVC такъв.
Това е строго препоръчително, ако някога сте правили или сливали клонове в TFS, но няма да работи с версии на сървъра по-стари от TFS 2010 -- преди тази версия ``клоновете'' бяха просто папки и git-tfs не ги различава от обикновени директории.

Да разгледаме полученото Git хранилище:

[source,powershell]
----
PS> git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from $/tfvc-test/Trunk
* c403405 (HEAD, tfs/default, master) Hello
* b75da1a New project
PS> git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author: Ben Straub <ben@straub.cc>
Date:   Fri Aug 1 03:41:59 2014 +0000

    Hello

    git-tfs-id: [https://username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16
----

Съществуват два локални клона, `master` и `featureA`, които пресъздават началната стартова точка на копието (`Trunk` в TFVC) и подчинен клон (`featureA` в TFVC).
Може също да видите, че `tfs` фиктивния ``remote'' има няколко референции: `default` и `featureA`, които представляват TFVC клонове.
Git-tfs асоциира клона, от който клонирахме с `tfs/default` а другите вземат собствените си имена.

Друго нещо за отбелязване са `git-tfs-id:` редовете от къмит съобщенията.
Вместо тагове, git-tfs използва тези маркери за да свързва TFVC changeset-и към Git къмити.
Последствието от това е, че вашите Git къмити ще имат различни SHA-1 чексуми преди и след публикуването им в TFVC.

===== Git-tf[s] работен процес

[NOTE]
====
Без оглед на това кой инструмент използвате, ще трябва да настроите някои Git конфигурации за да избегнете проблеми.

[source,console]
----
$ git config set --local core.ignorecase=true
$ git config set --local core.autocrlf=false
----
====

Време е да поработим по проект.
TFVC и TFS имат няколко възможности, които биха могли да усложнят работния ви процес:

. Feature клоновете несъществуващи на TFVC добавят усложнения.
  Това се дължи на *много различния* начин, по който TFVC и Git управляват клоновете.
. Трябва да знаете, че TFVC позволява на потребителите да правят ``checkout'' на файлове от сървъра като същевременно ги заключват за достъп и никой друг не може да ги редактира.
  Това очевидно не може да ви спре да ги редактирате в локалното хранилище, но може да е пречка в момента, когато опитате да публикувате на TFVC сървъра.
. TFS има концепцията за ``gated'' checkins, при които TFS build-test цикъла трябва да завърши успешно преди даден checkin да бъде позволен.
  Това използва ``shelve'' функцията в TFVC, която няма да разглеждаме подробно.
    Можете да заблудите това ръчно с git-tf и git-tfs осигурява `checkintool` команда, която е gate-aware.

За да сме кратки, ще разгледаме работен процес, при който тези проблеми се заобикалят.

===== Работен процес с `git-tf`


Да кажем, че сме извършили промени и няколко къмита в `master` клона и искаме да ги изпратим на TFVC сървъра.
Ето нашето Git хранилище:

[source,console]
----
$ git log --oneline --graph --decorate --all
* 4178a82 (HEAD, master) update code
* 9df2ae3 update readme
* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Искаме да вземем snapshot-а от къмит `4178a82` и да го изпратим на TFVC сървъра.
Отново, както е редно, проверяваме за междувременно публикувана от друг нова работа:

[source,console]
----
$ git tf fetch
Username: domain\user
Password:
Connecting to TFS...
Fetching $/myproject at latest changeset: 100%, done.
Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.
$ git log --oneline --graph --decorate --all
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
| * 4178a82 (HEAD, master) update code
| * 9df2ae3 update readme
|/
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Такава има и историята ни сега е разклонена.
Тук Git се чувства много добре, но имаме две опции за продължение:

. Да направим merge къмит звучи естествено за нас като Git потребител (в края на краищата, това е което прави `git pull`), и git-tf може да го направи с `git tf pull`.
  Обаче, трябва да сме наясно, че TFVC не мисли по този начин и ако публикуваме merge къмити историята ни ще започне да изглежда различно от двете страни, което не е никак желателно.
  Ако обаче планирате да публикувате всички свои промени като единичен changeset, то тогава това е най-лесният избор.
. Пребазирането е другата възможност, то прави историята ни линейна, което значи, че имаме възможността да конвертираме всеки от нашите Git къмити в TFVC changeset.
  Понеже това ни оставя с повече налични опции, бихме препоръчали да правите нещата по този начин, git-tf улеснява процеса с командата `git tf pull --rebase`.

Но изборът си е ваш.
В този пример ще пребазираме:

[source,console]
----
$ git rebase FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Сега сме готови да направим checkin към TFVC сървъра.
Git-tf предоставя избор да направим единичен changeset с всички промени от последния такъв (`--shallow`, което е по подразбиране) или да правим по един нов changeset за всеки Git къмит (`--deep`).
Ние избираме първото:

[source,console]
----
$ git tf checkin -m 'Updating readme and code'
Username: domain\user
Password:
Connecting to TFS...
Checking in to $/myproject: 100%, done.
Checked commit 5a0e25e in as changeset 35348
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Появи се нов `TFS_C35348` таг индикиращ, че TFVC пази точно същия snapshot като къмита `5a0e25e`.
Важно е да посочим, че не всеки Git къмит трябва да има съответен елемент в TFVC, например къмитът `6eb3eb5` не съществува никъде на сървъра.

Това е главния работен процес.
Има и други съображения, които трябва да имате наум:

* Клонове няма.
  Git-tf може да създава само Git хранилище от един TFVC клон в един монент.
* Участвайте в съвместната работа използвайки или TFVC или Git, но не и двете.
  Различните git-tf копия на едно и също TFVC хранилище може да имат различни SHA-1 хешове, което е гаранция за безкрайни главоболия.
* Ако работните методи на вашия екип включват съвместна работа в Git и периодично синхронизиране в TFVC, свързвайте се с TFVC само с едно от Git хранилищата.

===== Работен процес с `git-tfs`

Да минем през същия сценарий с git-tfs.
Ето новите къмити направени в `master` клона на нашето Git хранилище:

[source,powershell]
----
PS> git log --oneline --graph --all --decorate
* c3bd3ae (HEAD, master) update code
* d85e5a2 update readme
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 (tfs/default) Hello
* b75da1a New project
----

Проверяваме за нови промени публикувани от друг:

[source,powershell]
----
PS> git tfs fetch
C19 = aea74a0313de0a391940c999e51c5c15c381d91d
PS> git log --all --oneline --graph --decorate
* aea74a0 (tfs/default) update documentation
| * c3bd3ae (HEAD, master) update code
| * d85e5a2 update readme
|/
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Изглежда, че наш колега е добавил нов TFVC changeset, който се показва като нов `aea74a0` къмит и че отдалеченият клон `tfs/default` се е преместил.

Както и при git-tf, имаме две възможности да се справим с разклонената история:

. Пребазиране, за да я запазим линейна.
. Сливане, за да запазим данните за това какво реално се е случило.

В този случай, ще направим ``deep'' checkin, където всеки Git къмит става отделен TFVC changeset, така че искаме да пребазираме.

[source,powershell]
----
PS> git rebase tfs/default
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
PS> git log --all --oneline --graph --decorate
* 10a75ac (HEAD, master) update code
* 5cec4ab update readme
* aea74a0 (tfs/default) update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Сега сме готови да изпратим работата си към TFVC сървъра.
Тук ще използваме командата `rcheckin` за да направим самостоятелен TFVC changeset за всеки Git къмит в пътя от HEAD до първия `tfs` отдалечен клон, който е намерен (`checkin` командата ще направи само един changeset, нещо като squashing на Git къмити).

[source,powershell]
----
PS> git tfs rcheckin
Working with tfs remote: default
Fetching changes from TFS to minimize possibility of late conflict...
Starting checkin of 5cec4ab4 'update readme'
 add README.md
C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017
Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit...
Rebase done successfully.
Starting checkin of b1bf0f99 'update code'
 edit .git\tfs\default\workspace\ConsoleApplication1/ConsoleApplication1/Program.cs
C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b
Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit...
Rebase done successfully.
No more to rcheckin.
PS> git log --all --oneline --graph --decorate
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Забележете как след всеки успешен checkin към TFVC сървъра, git-tfs пребазира останалата работа върху това, което току що е направила.
Това се налага, защото командата добавя полето `git-tfs-id` в края на къмит съобщенията, което променя SHA-1 хешовете им.
Това е точно както е редно да бъде и не трябва да ви безпокои, но все пак трябва да сте наясно, че това се случва -- особено ако споделяте Git къмити с други.

TFS има много функционалности интегрирани със собствената си version control система като например work items, designated reviewers, gated checkins, и т.н.
Може да е трудно да работите с тях използвайки само инструмент от команден ред, но за щастие git-tfs позволява да пускате графичен checkin инструмент много лесно:

[source,powershell]
----
PS> git tfs checkintool
PS> git tfs ct
----

Той изглежда така:

.Графичен git-tfs checkin инструмент.
image::images/git-tfs-ct.png[Графичен git-tfs checkin инструмент.]

Това изглежда познато за TFS потребителите, защото е същия диалог, който се пуска от Visual Studio.

Git-tfs също така позволява да контролирате TFVC клонове от вашето Git хранилище.
За пример, да създадем един:

[source,powershell]
----
PS> git tfs branch $/tfvc-test/featureBee
The name of the local branch will be : featureBee
C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5
PS> git log --oneline --graph --decorate --all
* 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Създаването на клон в TFVC означава създаване на changeset, в който клона съществува и това се проектира като Git къмит.
Отбележете също, че git-tfs *създаде* отдалечения клон `tfs/featureBee`, но `HEAD` все още сочи към `master`.
Ако искате да работите по новия клон, ще искате да базирате новите си къмити на къмита `1d54865`, например като създадете topic клон от него.

===== Git и TFS, обобщение

Git-tf и Git-tfs представляват чудесни инструменти за комуникация с TFVC сървър.
Те позволяват да използвате силата на Git локално без да се налага постоянно да се обръщате към централен TFVC сървър и улесняват живота ви на разработчик сътрудничещ в екип с колеги, които не работят на Git.
Ако работите под Windows (което е вероятно, ако екипът ви използва TFS), вероятно ще предпочетете git-tfs, понеже наборът му от функции е по-пълен, с други операционни системи вероятно ще използвате git-tf, който е по-ограничен откъм функционалности.
Както с повечето инструменти в тази глава, би следвало да изберете една от двете VCS системи за водеща и да използвате другата като подчинена -- или Git или TFVC трябва да е център на съвместната работа, но не и двете.
