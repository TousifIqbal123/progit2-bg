[[_git_aliases]]
=== Псевдоними в Git

(((aliases)))
Преди да приключим с тази глава за основите на Git, има още една малка секция, която може да направи работата ви по-лесна и удобна: псевдонимите (aliases).
По-късно в книгата няма да се обръщаме към тях или да считаме, че сте ги овладяли - но е хубаво да знаете как да ги ползвате.

Git не допълва автоматично командите ви докато ги пишете.
Ако не искате да пишете целия текст за дадена команда, можете лесно да си съдадете съкратен псевдоним за нея с помощта на `git config`.(((git commands, config)))
Ето няколко примера, които може да намерите за полезни:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Съгласно този пример, вместо да пишете `git commit`, можете да напишете `git ci`.
Колкото повече започнете да ползвате Git, толкова по-вероятно е да искате нещо подобно, така че - не се притеснявайте да си създавате нови псевдоними.

Тази техника също така ви позволява да си създавате команда, която не съществува, а ви се иска да я имате под ръка.
Например, за коригиране на не много удобния похват за де-индексиране на файл:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Това ще направи следните две команди еквивалентни:

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

Което изглежда една идея по-чисто.
Често потребителите добавят команда `last`, нещо подобно на това:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

По този начин лесно можете да видите последния къмит:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    Test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Както се вижда, Git просто заменя новата команда със съдържанието на реалната такава.
Обаче, може да искате да изпълните външна команда, вместо подкоманда на Git.
В този случай, стартирате командата със символа `!`.
Това е полезно, ако пишете собствени инструменти за работа с Git хранилища.
Можем да демонстрираме като асоциираме `git visual` към псевдонима `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
